{
  "message": "TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'\n",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) \n        result <- py_to_r(result)\n    if (is.null(result)) \n        invisible(result)\n    else result\n}, class = c(\"python.builtin.type\", \"python.builtin.object\"), py_object = <environment>))(units = integer(0), \n    activation = \"relu\", use_bias = TRUE, kernel_initializer = \"glorot_uniform\", \n    bias_initializer = \"zeros\", kernel_regularizer = NULL, bias_regularizer = NULL, \n    activity_regularizer = NULL)", "do.call(layer_class, args)", "create_layer(keras$layers$Dense, object, list(units = as.integer(units), \n    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, \n    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, \n    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, \n    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, \n    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), \n    batch_size = as_nullable_integer(batch_size), dtype = dtype, \n    name = name, trainable = trainable, weights = weights))", "layer_dense(., units = FLAGS$neurons2, activation = \"relu\")", "create_layer(keras$layers$Dropout, object, list(rate = rate, \n    noise_shape = normalize_shape(noise_shape), seed = seed, \n    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), \n    batch_size = as_nullable_integer(batch_size), name = name, \n    trainable = trainable, weights = weights))", "layer_dropout(., rate = FLAGS$dropout1)", "create_layer(keras$layers$Dense, object, list(units = as.integer(units), \n    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, \n    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, \n    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, \n    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, \n    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), \n    batch_size = as_nullable_integer(batch_size), dtype = dtype, \n    name = name, trainable = trainable, weights = weights))", "layer_dense(., units = 1, activation = \"linear\")", "model %>% layer_dense(units = FLAGS$neurons1, activation = \"relu\", \n    input_shape = ncol(x_train)) %>% layer_dropout(rate = FLAGS$dropout1) %>% \n    layer_dense(units = FLAGS$neurons2, activation = \"relu\") %>% \n    layer_dropout(rate = FLAGS$dropout1) %>% layer_dense(units = 1, \n    activation = \"linear\")", "build_model()", "eval(ei, envir)", "eval(ei, envir)", "training_run(\"/Users/Artur/layer1_model.R\", flags = list(dropout1 = best_run1$flag_dropout1, \n    neurons1 = best_run1$flag_neurons1, lr = best_run1$flag_lr))"]
}
