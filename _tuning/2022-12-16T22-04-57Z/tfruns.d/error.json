{
  "message": "object 'FLAG' not found",
  "traceback": ["py_resolve_dots(list(...))", "keras$constraints$MaxNorm(max_value = as.integer(max_value), \n    axis = as.integer(axis))", "constraint_maxnorm(max_value = FLAG$maxnorm, axis = 0)", "create_layer(keras$layers$Dense, object, list(units = as.integer(units), \n    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, \n    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, \n    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, \n    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, \n    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), \n    batch_size = as_nullable_integer(batch_size), dtype = dtype, \n    name = name, trainable = trainable, weights = weights))", "layer_dense(., units = FLAGS$neurons1, activation = \"relu\", input_shape = ncol(x_train), \n    constraint_maxnorm(max_value = FLAG$maxnorm, axis = 0))", "create_layer(keras$layers$Dropout, object, list(rate = rate, \n    noise_shape = normalize_shape(noise_shape), seed = seed, \n    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), \n    batch_size = as_nullable_integer(batch_size), name = name, \n    trainable = trainable, weights = weights))", "layer_dropout(., rate = FLAGS$dropout1)", "create_layer(keras$layers$Dense, object, list(units = as.integer(units), \n    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, \n    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, \n    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, \n    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, \n    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), \n    batch_size = as_nullable_integer(batch_size), dtype = dtype, \n    name = name, trainable = trainable, weights = weights))", "layer_dense(., units = 1, activation = \"linear\")", "model %>% layer_dense(units = FLAGS$neurons1, activation = \"relu\", \n    input_shape = ncol(x_train), constraint_maxnorm(max_value = FLAG$maxnorm, \n        axis = 0)) %>% layer_dropout(rate = FLAGS$dropout1) %>% \n    layer_dense(units = 1, activation = \"linear\")", "one.layer.model()", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"/Users/Artur/layer1_model.R\", runs_dir = \"_tuning\", \n    flags = par)"]
}
