{
  "message": "KeyboardInterrupt\n",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) \n        result <- py_to_r(result)\n    if (is.null(result)) \n        invisible(result)\n    else result\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = 128L, epochs = 50L, \n    verbose = 1L, validation_split = 0, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, x = <environment>, \n    y = <environment>, validation_data = <environment>, callbacks = list(\n        <environment>, <environment>, <environment>))", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., x_train, y_train, epochs = epochs, \n    batch_size = 128, validation_data = list(x_val, y_val), verbose = 1, \n    callbacks = list(early_stop))", "fit(., x_train, y_train, epochs = epochs, batch_size = 128, validation_data = list(x_val, \n    y_val), verbose = 1, callbacks = list(early_stop))", "model %>% fit(x_train, y_train, epochs = epochs, batch_size = 128, \n    validation_data = list(x_val, y_val), verbose = 1, callbacks = list(early_stop))", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"/Users/Artur/layer2_model.R\", sample = 0.5, runs_dir = \"_tuning\", \n    flags = par)"]
}
